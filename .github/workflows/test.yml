name: Test

on:
  push:
    paths:
      - '.github/workflows/test.yml'
      - '**/*.swift'
      - 'Package.resolved'
  pull_request:
    paths:
      - '.github/workflows/test.yml'
      - '**/*.swift'
      - 'Package.resolved'

jobs:
  swift:
    strategy:
      fail-fast: true
      matrix:
        operating-system: ["ubuntu-18.04", "ubuntu-20.04", "macos-12"]
        swift-version: ["5.5.3", "5.6.3", "5.7"]
        include:
          - swift-version: "5.5.3"
            xcode-version: "13.2.1"
          - swift-version: "5.6.3"
            xcode-version: "13.4.1"
          - swift-version: "5.7"
            xcode-version: "14.0.1"
    runs-on: ${{ matrix.operating-system }}
    steps:
      - uses: actions/checkout@v3
      - uses: sinoru/actions-setup-xcode@v2
        if: ${{ startsWith(matrix.operating-system, 'macos') && matrix.xcode-version }}
        with:
          xcode-version: ${{ matrix.xcode-version }}
          apple-id: ${{ secrets.APPLE_ID }}
          apple-id-password: ${{ secrets.APPLE_ID_PASSWORD }}
      - uses: sinoru/actions-setup-swift@v2
        with:
          swift-version: ${{ matrix.swift-version }}
      - uses: actions/cache@v3
        id: cache
        with:
          path: .build
          key: ${{ matrix.operating-system }}-swift-${{ env.SWIFT_VERSION }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ matrix.operating-system }}-swift-${{ env.SWIFT_VERSION }}-
            ${{ matrix.operating-system }}-swift-
      - name: Resolve Package Dependencies
        run: swift package resolve
      - name: Build
        run: swift build --disable-automatic-resolution --build-tests
        env:
          SWIFT_VERSION: ${{ matrix.swift-version }}
      - name: Run tests
        run: swift test --disable-automatic-resolution --skip-build
        env:
          SWIFT_VERSION: ${{ matrix.swift-version }}

  xcode:
    strategy:
      fail-fast: true
      matrix:
        xcode-version: ["13.2.1", "13.4.1", "14.0.1"]
        xcode-destination-platform: [
          "iOS",
          "macOS",
          "macCatalyst",
          "tvOS",
          "watchOS",
        ]
        include:
          - xcode-version: "13.2.1"
            operating-system: "macos-11"
          - xcode-version: "13.4.1"
            operating-system: "macos-12"
          - xcode-version: "14.0.1"
            operating-system: "macos-12"
          - xcode-destination-platform: "iOS"
            xcode-destination: "platform=iOS Simulator,name=iPhone 12 Pro,OS=latest"
          - xcode-destination-platform: "macOS"
            xcode-destination: "platform=OS X,arch=x86_64"
          - xcode-destination-platform: "macCatalyst"
            xcode-destination: "platform=OS X,arch=x86_64,variant=Mac Catalyst"
          - xcode-destination-platform: "tvOS"
            xcode-destination: "platform=tvOS Simulator,name=Apple TV,OS=latest"
          - xcode-destination-platform: "watchOS"
            xcode-destination: "platform=watchOS Simulator,name=Apple Watch Series 6 - 44mm,OS=latest"
    runs-on: ${{ matrix.operating-system }}
    steps:
      - uses: actions/checkout@v2
      - uses: sinoru/actions-setup-xcode@v2
        with:
          xcode-version: ${{ matrix.xcode-version }}
          apple-id: ${{ secrets.APPLE_ID }}
          apple-id-password: ${{ secrets.APPLE_ID_PASSWORD }}
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ matrix.operating-system }}-Xcode-${{ matrix.xcode-version }}-${{ matrix.xcode-destination-platform }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ matrix.operating-system }}-Xcode-${{ matrix.xcode-version }}-${{ matrix.xcode-destination-platform }}-
            ${{ matrix.operating-system }}-Xcode-${{ matrix.xcode-version }}-
            ${{ matrix.operating-system }}-Xcode-
      - name: Resolve Package Dependencies
        run: xcodebuild -resolvePackageDependencies
      - name: Build & Analyze
        run: xcodebuild -scheme swift-zip -destination '${{ matrix.xcode-destination }}' -disableAutomaticPackageResolution analyze build-for-testing
      - name: Test
        run: xcodebuild -scheme swift-zip -destination '${{ matrix.xcode-destination }}' -disableAutomaticPackageResolution test-without-building
